apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasura
  labels:
    app: hasura
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hasura
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hasura
    spec:
      containers:
        # https://dev.to/nhost/how-to-add-authentication-to-hasura-5529#:~:text=How%20to%20Add%20Authentication%20to%20Hasura%201%20Hasura,...%204%20Get%20started%20...%205%20Conclusion%20
  #       postgres:
  #   image: postgres
  #   restart: always
  #   volumes:
  #     - ./docker/data/db:/var/lib/postgresql/data
  #     - ./docker/initdb.d:/docker-entrypoint-initdb.d:ro
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
  #   ports:
  #     - '5432:5432'
  # graphql-engine:
  #   image: hasura/graphql-engine:v2.1.1
  #   depends_on:
  #     - postgres
  #   restart: always
  #   environment:
  #     HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
  #     HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
  #     HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
  #     HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
  #     HASURA_GRAPHQL_LOG_LEVEL: debug
  #     HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
  #   ports:
  #     - '8080:8080'
  # hasura-auth:
  #   image: nhost/hasura-auth:latest
  #   depends_on:
  #     - postgres
  #     - graphql-engine
  #   env_file:
  #     - .env
  #   environment:
  #     HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
  #     HASURA_GRAPHQL_GRAPHQL_URL: http://graphql-engine:8080/v1/graphql
  #   ports:
  #     - '4000:4000'
  #   volumes:
  #     - ./docker/data/mailhog:/maildir
        # old
        - name: hasura
          image: hasura/graphql-engine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # check if metadata is consistent with database to determine true readiness
          # readinessProbe: 
          #   httpGet:
          #     path: /settings/metadata-status
          #     port: 8080
          #   initialDelaySeconds: 10
          #   periodSeconds: 5
          #   timeoutSeconds: 1
          # use hasuras /healtz endpoing to assess the overall health 
          livenessProbe:
            httpGet:
              path: /healthz 
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
          env:
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: 'postgres://postgres:supersecret@hasura-postgres-service:5432/postgres'
              # toggle varying types of logging for hasura
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: 'true' 
            - name: HASURA_GRAPHQL_LOG_QUERIES 
              value: 'true'  
            - name: HASURA_GRAPHQL_LOG_LEVEL
              value: 'debug'  
            - name: HASURA_GRAPHQL_DEV_MODE
              value: 'true'
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup, http-log, webhook-log, websocket-log, query-log  
              # this secret is needed in x-hasura-admin-secret to acces the graphql api, remember with hasura to POST your graphql requests
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              value: 'apis-over-data-$238'
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
      initContainers:
        - name: liquibase
          image: hasura-liquibase-migrations
          env:
            - name: URL
              value: 'jdbc:postgresql://hasura-postgres-service:5432/postgres'
            - name: USERNAME
              value: postgres
            - name: PASSWORD
              value: supersecret 
---
apiVersion: v1
kind: Service
metadata:
  name: hasura-admin-service
spec:
  selector:
    app: hasura
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080