<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:pro="http://www.liquibase.org/xml/ns/pro" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.4.xsd
      http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.5.xsd">
    <changeSet author="dan" id="1">
        <createTable tableName="actor">
            <column defaultValue="gen_random_uuid ()" name="id" type="UUID">
                <constraints nullable="false" primaryKey="true" />
            </column>
            <column name="firstname" type="text"/>
            <column name="lastname" type="text"/>
        </createTable>

        <createTable tableName="film">
            <column defaultValue="gen_random_uuid ()" name="id" type="UUID">
                <constraints nullable="false" primaryKey="true" />
            </column>
            <column name="name" type="text"/>
            <column name="release_date" type="timestamptz"/>
        </createTable>

        <createTable tableName="role">
            <column defaultValue="gen_random_uuid ()" name="id" type="UUID">
                <constraints nullable="false" primaryKey="true" />
            </column>
            <column name="name" type="text"/>
            <column name="actor_id" type="uuid">
                <constraints references="actor(id)" nullable="false" foreignKeyName="role_actor_ref"/>
            </column>
        </createTable>
    </changeSet>


    <changeSet author="aiden" id="2">
        <addColumn tableName="actor">
            <column name="middlename" type="text">
                <constraints nullable="true" />
            </column>
        </addColumn>
    </changeSet>


    <changeSet author="aiden" id="3">
        <addColumn tableName="role">
            <column name="film_id" type="uuid">
                <constraints nullable="true" foreignKeyName="film_role_ref" references="film(id)" />
            </column>
        </addColumn>
    </changeSet>

    <changeSet author="aiden" id="4">
        <addColumn tableName="role">
            <column name="created_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
        <addColumn tableName="film">
            <column name="created_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
        <addColumn tableName="actor">
            <column name="created_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
    </changeSet>

    <changeSet author="aiden" id="5">
        <addColumn tableName="role">
            <column name="version" defaultValue="0" type="integer" />
        </addColumn>
        <addColumn tableName="film">
            <column name="version" defaultValue="0" type="integer" />
        </addColumn>
        <addColumn tableName="actor">
            <column name="version" defaultValue="0" type="integer" />
        </addColumn>
    </changeSet>

    <changeSet author="aiden" id="6">
        <addColumn tableName="role">
            <column name="updated_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
        <addColumn tableName="film">
            <column name="updated_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
        <addColumn tableName="actor">
            <column name="updated_at" defaultValue="transaction_timestamp()" type="timestamp with time zone" />
        </addColumn>
    </changeSet>

    <changeSet author="aiden" id="7">
        <validCheckSum>8:a672a6eff7b974b34ca921a63e902108</validCheckSum>
        <createProcedure dbms="postgres">
            <comment>Create a trigger to update updated_at with now() and increment version </comment>

            CREATE OR REPLACE FUNCTION on_updated_trigger() RETURNS TRIGGER AS 
            $$
            BEGIN
                new.updated_at := now();
                new.version := new.version + 1;
                return new;
            END
            $$ 
            LANGUAGE plpgsql;
        </createProcedure>
        <createProcedure dbms="postgres">
            <comment>Trigger previously defined trigger when UPDATE is called for actor,film,role </comment>

            CREATE OR REPLACE TRIGGER trigger_on_updated_trigger
            BEFORE UPDATE ON [actor, film, role]
            FOR EACH ROW EXECUTE PROCEDURE on_updated_trigger_ref()
        </createProcedure>
    </changeSet>

</databaseChangeLog> 